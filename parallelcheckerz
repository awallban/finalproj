
#include<iostream>
#include<cmath>
#include<mpi.h>


using namespace std;


////////////////////////////////////////////////////////////////////////////////
//fun with functions
//
struct Board{
	char b[8][8];
	int score;
};
void copyBoard(Board& original, Board& copied){
    for(int i =0; i<8;i++)
	    for(int j=0; j < 8;j++)
		    copied.b[i][j] = original[i][j];
    copied.score = orginal.score;
}


vector<Board> getPossibleMoves(Board original){
//TODO: SOMETHING IN JACOBS BRAIN


return vector<>	
}


int scoreBoard(Board board);//TODO:
Board minimax(Board original, bool maximizer);//TODO:
void parallelSubMaster(bool maximizer, int id, int parentId, int childStartId, Board original){
	vector<Board> boards = getPossibleMoves(original);
	if(childStartId+boards.size() > numCores){
		//TODO: send 0 to parent, tag 10
		Board result = minimax(original, maximizer);
		//TODO: send result to parent tag 11
		return;
	}
	//TODO:MPI send to parent number of boards, tag 10
	for(int i =0; i<boards.size();i++){
		//TODO: send boards[i] to core childStartId+i, tag 01
	}
	for(int i=0; i<boards.size();i++){
		//Get boards back from cores;might as well refill boards, tag 11
	}
	
	//TODO:return best board to master
	
	
}
int main(int argc, char* argv[]){
	if(isRoot){
		vector<Board> boards = getPossibleMoves(emptyBoard);
		for(int i =0; i < boards.size();i++){
			//TODO:Send boards[i] to core i, tag 01
		}
		for(int i =0; i < boards.size();i++){
			//TODO:Get boards back from cores; might as well refill boards, tag 11
		}
		//TODO:print best board option

	}
	else{
		//TODO:get board and childStartId, save parentId, save maximizer state
		//TODO:call parallelSubMaster function
	}
	return 0;
}
